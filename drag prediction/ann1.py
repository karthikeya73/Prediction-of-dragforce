# -*- coding: utf-8 -*-
"""ANN1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kMY0c8f18gReUAHs4SBgQ3KDipmxl_vR
"""

from tensorflow import keras

from keras.models import Sequential

from keras.layers import Dense

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
df=pd.read_excel("dataset 2c.xlsx","Sheet1")
df['vehicle_tag']=(df['vehicle_tag']-df['vehicle_tag'].min())/(df['vehicle_tag'].max()-df['vehicle_tag'].min())
df['inter-vehiclar distance']=(df['inter-vehiclar distance']-df['inter-vehiclar distance'].min())/(df['inter-vehiclar distance'].max()-df['inter-vehiclar distance'].min())

X=df.iloc[:,:-1]
Y=df.iloc[:,-1]

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1)

from keras.models import Sequential
NN_model = Sequential()
# The Input Layer :
NN_model.add(Dense(512,input_dim = X_train.shape[1], activation='relu'))

# The Hidden Layers :
NN_model.add(Dense(1024,activation='relu'))
NN_model.add(Dense(512, activation='relu'))
# The Output Layer :
NN_model.add(Dense(1, ))

# Compile the network :
NN_model.compile(loss='mean_absolute_error', optimizer='adam', metrics=['mean_squared_error'])
NN_model.summary()

e=100

history=NN_model.fit(X_train,Y_train,epochs=e,validation_data=(X_test,Y_test))

import matplotlib.pyplot as plt
 

plt.plot(range(1,e+1),history.history['mean_squared_error'],color="green",linewidth=2,label="training loss")
plt.legend()
# plt.figure()
plt.plot(range(1,e+1),history.history['val_mean_squared_error'],color="red",linewidth=1,label="Validation loss")
plt.legend()

NN_model.summary()

Y_pred=NN_model.predict(X_test)

np.array(Y_test).ravel()

np.array(Y_pred).ravel()



