# -*- coding: utf-8 -*-
"""LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BNrXSjxJTcsh0SEFN_Spb_fYgJ_ruxey
"""

import pandas as pd

import numpy as np

df=pd.read_excel('dataset 2c.xlsx','Sheet1')
  
#Normilzation of dataset
df['vehicle_tag']=(df['vehicle_tag']-df['vehicle_tag'].min())/(df['vehicle_tag'].max()-df['vehicle_tag'].min())
df['inter-vehiclar distance']=(df['inter-vehiclar distance']-df['inter-vehiclar distance'].min())/(df['inter-vehiclar distance'].max()-df['inter-vehiclar distance'].min())

X=df.iloc[:,:-1].values
Y=df.iloc[:,-1].values
# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1, random_state = 0)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)


y_pred = regressor.predict(X_test)
y_pred_train = regressor.predict(X_train)

# print r_square_score
from sklearn.metrics import r2_score
print("R_square score: ", r2_score(y_test,y_pred))

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_percentage_error

print("Mean squared error : ",mean_squared_error(y_test,y_pred))
print("Mean abosolute error : ",mean_absolute_percentage_error(y_test,y_pred))

import numpy as np
np.array(regressor.predict(X_test)).ravel()

y_test

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

color=['yellow','blue']

for i in range(2):
  X=df.iloc[:,i].values
  Y=df.iloc[:,-1].values

  X=X.reshape(-1,1)

  X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1, random_state = 0)

  regressor = LinearRegression()
  regressor.fit(X_train, y_train)




  y_pred = regressor.predict(X_test)
  y_pred_train = regressor.predict(X_train)
  
  # print r_square_score
  from sklearn.metrics import r2_score
  print("R_square score: ", r2_score(y_test,y_pred))
  plt.figure()
  plt.scatter(X_train,y_train,color=color[i])

  intercept=regressor.intercept_
  coef=regressor.coef_

  c=np.linspace(0,1,10)
  d=[x*coef+intercept for x in c]

  plt.plot(c,d,color='red')





