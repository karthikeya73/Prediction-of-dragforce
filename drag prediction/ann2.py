# -*- coding: utf-8 -*-
"""ANN2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cju_cGHXEO9VnA3N59rhvY8l-wDUX2ne
"""

import keras
from keras.models import Sequential
from keras.layers.core import Dense

import pandas as pd
df=pd.read_excel("dataset 2c.xlsx","Sheet1")
df['vehicle_tag']=(df['vehicle_tag']-df['vehicle_tag'].min())/(df['vehicle_tag'].max()-df['vehicle_tag'].min())
df['inter-vehiclar distance']=(df['inter-vehiclar distance']-df['inter-vehiclar distance'].min())/(df['inter-vehiclar distance'].max()-df['inter-vehiclar distance'].min())
X=df.iloc[:,:2].values
Y=df.iloc[:,2].values

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1)

import tensorflow as tf
NN_model = Sequential()

# The Input Layer :
NN_model.add(Dense(512, input_dim = X_train.shape[1], activation='relu'))

# The Hidden Layers :
NN_model.add(Dense(512,activation='relu'))

# The Output Layer :
NN_model.add(Dense(1,activation='linear'))

# Compile the network :
NN_model.compile(loss='mean_absolute_error', optimizer='adam', metrics=[tf.keras.losses.Huber()])
NN_model.summary()

NN_model.fit(X_train,Y_train, batch_size=22,epochs=10)

NN_model.evaluate(X_test,Y_test)

Y_test

import numpy as np
np.array(NN_model.predict(X_test)).ravel()

